import React, {useEffect, useMemo, useState} from 'react';
import {useDebounce} from "../common/useDebounce";
import Pagination from "../common/Pagination";
import axios from "axios";
import {TiDelete} from "react-icons/ti";
import UseSearch from "./UseSearch";

const UseEmployeeSearchModal = ({closeEmployeeSearchModal, fetchChatList, createUrl, onSelectedEmployees, enableAutoComplete = false}) => {

    // üî¥ ÏßÅÏõê state
    const [selectedEmployees, setSelectedEmployees] = useState([]); // ÏÑ†ÌÉùÎêú ÏßÅÏõê
    const [employeeSearchText, setEmployeeSearchText] = useState(''); // ÏßÅÏõê Í≤ÄÏÉâ ÌÖçÏä§Ìä∏
    const debouncedEmployeeSearchText = useDebounce(employeeSearchText, 300);

    // üî¥ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò state
    const [totalPages, setTotalPages] = useState(0); // Ï¥ù ÌéòÏù¥ÏßÄ Ïàò
    const [currentPage, setCurrentPage] = useState(1); // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ
    const [itemsPerPage, setItemsPerPage] = useState(10); // ÌéòÏù¥ÏßÄ Îãπ ÏßÅÏõê Ïàò
    const [totalItems, setTotalItems] = useState(0); // Ï¥ù ÏßÅÏõê Ïàò

    // üî¥ useSearch ÌõÖ ÏÇ¨Ïö©
    const initialParams = useMemo(() => ({
        page: currentPage,
        size: itemsPerPage
    }), [currentPage, itemsPerPage]);
    const endpoint = "/api/messengers/employeeList";
    const {
        data: employeeData = [],
        searchLoading
    } = UseSearch(endpoint, debouncedEmployeeSearchText, '', initialParams);

    // üî¥ Í≤ÄÏÉâ Í≤∞Í≥º Ï¥ù ÌéòÏù¥ÏßÄ Î∞è ÏßÅÏõê Ïàò ÏóÖÎç∞Ïù¥Ìä∏
    useEffect(() => {
        console.log("Î∂àÎü¨Ïò® ÏßÅÏõê Îç∞Ïù¥ÌÑ∞:", employeeData);
        if (employeeData.content) {
            setTotalItems(employeeData.totalElements || 0);
            setTotalPages(employeeData.totalPages || 0);
        }
    }, [employeeData]);

    // üî¥ ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ï≤òÎ¶¨ Ìï®Ïàò
    const handlePageChange = (pageNumber) => {
        setCurrentPage(pageNumber);
    };

    // üî¥ ÌéòÏù¥ÏßÄÎãπ Ìï≠Î™© Ïàò Î≥ÄÍ≤Ω Ï≤òÎ¶¨ Ìï®Ïàò
    const handleItemsPerPageChange = (items) => {
        setItemsPerPage(items);
        setCurrentPage(1);
    };

    // üî¥ Í≤ÄÏÉâÏñ¥ ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠ Í≥µÌÜµ Ìï®Ïàò
    const handleSearchDel = () => {
        setEmployeeSearchText('');
    };

    // üî¥ Í≤ÄÏÉâÏñ¥ Î≥ÄÍ≤Ω(ÏßÅÏõê)
    const handleEmployeeSearchTextChange = (event) => {
        setEmployeeSearchText(event.target.value);
    };

    // üî¥ Î™®Îã¨ Î∞∞Í≤Ω ÌÅ¥Î¶≠ Ïãú Ï∞Ω Îã´Í∏∞
    const handleBackgroundClick = (e) => {
        if (e.target.className === 'modal_overlay') {
            closeEmployeeSearchModal();
        }
    };

    // üî¥ ÏßÅÏõê Ï†ÑÏ≤¥ ÏÑ†ÌÉù/Ìï¥Ï†ú
    const handleSelectAll = (event) => {
        if (event.target.checked) {
            const allEmployeesOnPage = employeeData.content?.map(employee => ({
                employeeId: employee.employeeId,
                employeeName: employee.employeeName,
                departmentName: employee.departmentName,
                jobName: employee.jobName,
            }));
            setSelectedEmployees(prevSelected => {
                const newSelected = [...prevSelected];
                allEmployeesOnPage.forEach(employee => {
                    if (!newSelected.some(selected => selected.employeeId === employee.employeeId)) {
                        newSelected.push(employee);
                    }
                });
                return newSelected;
            });
        } else {
            const allEmployeeIdsOnPage = employeeData.map(employee => employee.employeeId);
            setSelectedEmployees(prevSelected =>
                prevSelected.filter(selected => !allEmployeeIdsOnPage.includes(selected.employeeId))
            );
        }
    };

    // üî¥ Ï†ÑÏ≤¥ ÏÑ†ÌÉù Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉÅÌÉúÎ•º ÏóÖÎç∞Ïù¥Ìä∏
    const isAllSelected = employeeData.length > 0 && employeeData.every(employee =>
        selectedEmployees.some(selected => selected.employeeId === employee.employeeId)
    );

    // üî¥ ÌéòÏù¥ÏßÄ Ïù¥Îèô Ïãú ÏÑ†ÌÉùÎêú Ìï≠Î™© ÏÉÅÌÉú Ïú†ÏßÄÌïòÎäî Î°úÏßÅ
    useEffect(() => {
        const allSelectCheckbox = document.getElementById("all-select_checkbox");
        if (allSelectCheckbox) {
            allSelectCheckbox.checked = isAllSelected;
        }
    }, [isAllSelected, employeeData, selectedEmployees]);

    // üî¥ ÏßÅÏõê Í∞úÎ≥Ñ ÏÑ†ÌÉù/Ìï¥Ï†ú
    const handleSelectEmployee = (employeeId, employeeName, departmentName, jobName) => {
        setSelectedEmployees((prevSelected) => {
            const isAlreadySelected = prevSelected.some(
                (selected) => selected.employeeId === employeeId
            );
            if (isAlreadySelected) {
                return prevSelected.filter(
                    (selected) => selected.employeeId !== employeeId
                );
            } else {
                return [
                    ...prevSelected,
                    {employeeId, employeeName, departmentName, jobName},
                ];
            }
        });
    };

    // üî¥ ÏÑ†ÌÉùÎêú ÏßÅÏõê Í∞úÎ≥Ñ ÏÇ≠Ï†ú
    const handleRemoveSelectedEmployee = (employeeId) => {
        setSelectedEmployees(prevSelected =>
            prevSelected.filter(employee => employee.employeeId !== employeeId)
        );
    };

    // üî¥ Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÎòêÎäî ÏßÅÏõê Î™©Î°ù Ï†ÑÎã¨
    const createHandler = async () => {
        const employeeIds = selectedEmployees.map(employee => employee.employeeId);

        if (createUrl && createUrl !== '') {
            // Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±
            try {
                const response = await axios.post(createUrl, employeeIds);
                console.log('Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÏÑ±Í≥µ:', response.data);

                if (fetchChatList) {
                    fetchChatList();
                }
                closeEmployeeSearchModal();
            } catch (error) {
                console.error("Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
            }
        } else {
            // Ï™ΩÏßÄ - ÏÑ†ÌÉùÎêú ÏßÅÏõê Î™©Î°ù Ï†ÑÎã¨
            if (selectedEmployees.length > 0) {
                onSelectedEmployees(selectedEmployees);
            }
            closeEmployeeSearchModal();
        }
        console.log("ÏÑ†ÌÉùÎêú ÏßÅÏõê", selectedEmployees);
    };


    return (
    <div className="modal_overlay" onMouseDown={handleBackgroundClick}>
        <div className="modal_container search search_employee">
            <div className="header">
                <div>ÏßÅÏõê Í≤ÄÏÉâ</div>
                <button className="btn_close" onClick={closeEmployeeSearchModal}><i className="bi bi-x-lg"></i></button>
            </div>
            <div className="search_wrap">
                <div className={`search_box ${employeeSearchText ? 'has_text' : ''}`}>
                    <label className="label_floating">Ïù¥Î¶Ñ, Î∂ÄÏÑú, ÏßÅÍ∏â</label>
                    <i className="bi bi-search"></i>
                    <input
                        type="text"
                        className="box search"
                        value={employeeSearchText}
                        onChange={handleEmployeeSearchTextChange}
                        style={{width: '280px'}}
                    />
                    {/* Í≤ÄÏÉâÏñ¥ ÏÇ≠Ï†ú Î≤ÑÌäº */}
                    {employeeSearchText && (
                        <button
                            className="btn-del"
                            onClick={() => handleSearchDel(setEmployeeSearchText)}
                        >
                            <i className="bi bi-x"></i>
                        </button>
                    )}
                </div>
                <div className="create-wrap">
                    <button
                        className="btn-create"
                        onClick={createHandler}
                    >
                        ÌôïÏù∏
                    </button>
                </div>
            </div>
            <div className="table_wrap">
                {/* Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏûàÏùÑ Í≤ΩÏö∞ Î™©Î°ùÏùÑ Ï∂úÎ†• */}
                <table>
                    <thead>
                    <tr>
                        <th>
                            <div className="checkbox-container">
                                <input
                                    type="checkbox"
                                    checked={isAllSelected}
                                    onChange={handleSelectAll}
                                />
                            </div>
                        </th>
                        <th>Ïù¥Î¶Ñ</th>
                        <th>Î∂ÄÏÑú</th>
                        <th>ÏßÅÍ∏â</th>
                    </tr>
                    </thead>
                    <tbody>
                    {searchLoading ? (
                        <tr className="tr_empty">
                            <td colSpan="4">
                                <div className="loading">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </td>
                        </tr>
                    ) : employeeData.content?.length > 0 ? (
                        /* Í≤ÄÏÉâÎêú ÏßÅÏõê Î™©Î°ùÏùÑ Ï∂úÎ†• */
                        employeeData.content.map((employee) => (
                            <tr key={employee.employeeId}
                                onClick={() => handleSelectEmployee(employee.employeeId, employee.employeeName, employee.departmentName, employee.jobName)}>
                                {/* Ï≤¥ÌÅ¨Î∞ïÏä§ */}
                                <td>
                                    <div className="checkbox-container">
                                        <input
                                            type="checkbox"
                                            checked={selectedEmployees.some(selected => selected.employeeId === employee.employeeId)} // ÏàòÏ†ï Î∂ÄÎ∂Ñ
                                            onClick={(e) => e.stopPropagation()}
                                            onChange={() => handleSelectEmployee(employee.employeeId, employee.employeeName, employee.departmentName, employee.jobName)}
                                        />
                                    </div>
                                </td>
                                {/* ÏßÅÏõê Ïù¥Î¶Ñ */}
                                <td>{employee.employeeName || '-'}</td>
                                {/* ÏßÅÏõê Î∂ÄÏÑú */}
                                <td>{employee.departmentName || '-'}</td>
                                {/* ÏßÅÏõê ÏßÅÍ∏â */}
                                <td>{employee.jobName || '-'}</td>
                            </tr>
                        ))
                    ) : (
                        <tr className="tr_empty">
                            <td colSpan="4">
                                <div className="no_data">Ï°∞ÌöåÎêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>
                            </td>
                        </tr>
                    )}
                    </tbody>
                </table>

            </div>
            {/* ÏÑ†ÌÉùÎêú ÏßÅÏõê Î™©Î°ù */}
            <div className="selected-employees">
                <ul className="selected-employees-list">
                    {selectedEmployees.map((employee) => (
                        <li
                            key={employee.employeeId}
                            className="selected-employee-item"
                            onClick={() => handleRemoveSelectedEmployee(employee.employeeId)}
                        >
                            {employee.employeeName}
                            <button
                                onClick={(e) => {
                                    e.stopPropagation();
                                    handleRemoveSelectedEmployee(employee.employeeId);
                                }}
                            >
                                <TiDelete/>
                            </button>
                        </li>
                    ))}
                </ul>
            </div>

            {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
            <Pagination
                currentPage={currentPage}
                totalPages={totalPages}
                itemsPerPage={itemsPerPage}
                totalItems={totalItems}
                searchLoading={searchLoading}
                handlePage={handlePageChange}
                handleItemsPerPageChange={handleItemsPerPageChange}
                showFilters={false}
            />
        </div>
    </div>
);
}

export default UseEmployeeSearchModal;
