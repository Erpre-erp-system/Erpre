import React, { useEffect, useState } from 'react';
import { BrowserRouter } from "react-router-dom";
import ReactDOM from 'react-dom/client';
import '../../../resources/static/css/conversation/SentMail.css'
import Layout from "../../layout/Layout";
import Pagination from '../common/Pagination';
import axios from 'axios';
import { useNavigate } from "react-router-dom"; // useNavigate import
import EmailSendModal from '../common/EmailSendModal'; //Î™®Îã¨ Î∑∞Ïñ¥ ÏûÑÌè¨Ìä∏


function SentMail() {

  const [isLoading, setLoading] = useState(true); // Î°úÎî© ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [showModal, setShowModal] = useState(false);// Î™®Îã¨ ÎùÑÏõÄ
  const [sendData, setSendData] = useState([]); // Î≥¥ÎÇ∏Î©îÏùº ÎÇ¥Ïó≠ Î∂àÎü¨ÏôÄÏÑú Ï†ÄÏû•  
  const employeeId = localStorage.getItem('employeeId');
  const navigate = useNavigate(); // useNavigate ÌõÖ Ï¥àÍ∏∞Ìôî
  const [selectedEmail, setSelectedEmail] = useState('')

  // Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [selectedItems, setSelectedItems] = useState([]);
  // Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÏÉÅÌÉú Í≥ÑÏÇ∞
  const selectAll = sendData.length > 0 && selectedItems.length === sendData.length;

  // üü¢ Í∞úÎ≥Ñ Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑ†ÌÉù
  const handleCheckboxChange = (id) => {
    if (selectedItems.includes(id)) {
      setSelectedItems(selectedItems.filter(item => item !== id));
    } else {
      setSelectedItems([...selectedItems, id]);
    }
  };

  // üü¢ Ï†ÑÏ≤¥ ÏÑ†ÌÉù/Ìï¥Ï†ú
  const handleSelectAllChange = () => {
    if (selectAll) {
      // Ï†ÑÏ≤¥ Ìï¥Ï†ú
      setSelectedItems([]);
    } else {
      // Ï†ÑÏ≤¥ ÏÑ†ÌÉù
      const allIds = sendData.map(email => email.emailNmS);
      setSelectedItems(allIds);
    }
  };

  // ÏÇ≠Ï†ú Í∏∞Îä• Íµ¨ÌòÑ
  const handleDelete = async () => {
    if (selectedItems.length === 0) {
       window.showToast('ÏÇ≠Ï†úÌï† Î©îÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.', 'error', 3000);
      return;
    }

    const confirmDelete = window.confirm('ÏÑ†ÌÉùÌïú Î©îÏùºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
    if (!confirmDelete) {
      return;
    }

    try {
      // ÏÑúÎ≤ÑÏóê ÏÇ≠Ï†ú ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
      await axios.put('/api/email/sent/delete', {
        emailIds: selectedItems,
      });

      // ÏÇ≠Ï†ú ÌõÑ Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      const newSendData = sendData.filter(email => !selectedItems.includes(email.emailNmS));
      setSendData(newSendData);
      setSelectedItems([]);
    } catch (error) {
      console.error('Î©îÏùº ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', error);
      alert('Î©îÏùº ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Î≥¥ÎÇ∏ Î©îÏùº Ï°∞Ìöå
  useEffect(() => {
    const fetchSentEmail = async () => {
      try {
        const response = await axios.get(`/api/email/sent/${employeeId}`);

        const sortedData = response.data.sort((a, b) => new Date(b.emailDateS) - new Date(a.emailDateS));

        setSendData(sortedData);
        setLoading(false); // Î°úÎî© ÏôÑÎ£å ÌõÑ falseÎ°ú ÏÑ§Ï†ï
      } catch (error) {
        console.error('Î≥¥ÎÇ∏Î©îÏùºÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌïòÏòÄÏäµÎãàÎã§.', error);
      }
    };

    if (employeeId) {
      fetchSentEmail();
    }
  }, [employeeId]);
  console.log(sendData); // Î≥¥ÎÇ∏ Î©îÏùº ÎÇ¥Ïó≠

  //Î©îÏùº Ìï≠Î™© ÌÅ¥Î¶≠ Ïãú Ìï¥Îãπ Î©îÏùºÏùò ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô 
  // const handleEmailClick = (emailData) => {
  //   navigate(`/emailViewer/${emailData.emailNmS}`);
  // };

  //Î™®Îã¨ Í¥ÄÎ†® hooks
  // üü° Î™®Îã¨ Ïó¥Í∏∞
  const openModal = (emailData) => {
    setSelectedEmail(emailData);
    console.log("Î≥¥ÎÇ∏Î©îÏùºÌï®ÏóêÏÑú ÏÑ†ÌÉùÎêú Ïù¥Î©îÏùº Îç∞Ïù¥ÌÑ∞:", emailData); // ÏÑ†ÌÉùÎêú Ïù¥Î©îÏùº Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    setShowModal(true);
  };

  // Î™®Îã¨ Îã´Í∏∞
  const closeModal = () => {
    setShowModal(false);
  };

  return (
    <Layout currentMenu="sentMail">
      <main className="main-content menu_mail">

        <div className="menu_title">
          <div className="sub_title">Î≥¥ÎÇ∏ Î©îÏùºÌï®</div>
        </div>

        {/* ÏÇ≠Ï†ú Î≤ÑÌäº */}
        <button onClick={handleDelete} disabled={selectedItems.length === 0}>
          <i className="bi bi-trash trash_btn"></i>
        </button>

        {/* Í≤ÄÏÉâÏñ¥ ÏûÖÎ†• */}
        {/* <div className="mail-search search_box">
          <label className="label_floating">Î©îÏùº Í≤ÄÏÉâ</label>
          <i className="bi bi-search"></i>
          <input type="text" className="mail-search-box box search" />
          <button className="btn-del">
            <i className="bi bi-x"></i>
          </button>
        </div> */}
        <div className="menu_content">
          <div className="search_wrap">
            <div className="left">
              <div className="checkbox_box">
                <input type="checkbox" id="currentMail" name="status" onChange={handleSelectAllChange} checked={selectAll} />
              </div>
            </div>
          </div>
          <div className="table_wrap">
            <table className='table_border'>
              <thead>
                <tr>
                  <th>
                    <label className="chkbox_label">
                      <input type="checkbox" className="chkbox" onChange={handleSelectAllChange} checked={selectAll} />
                      <i className="chkbox_icon">
                        <i className="bi bi-check-lg"></i>
                      </i>
                    </label>
                  </th>
                  <th>
                    <div className="order_wrap">
                      <span>Ïù¥Î©îÏùº</span>
                      {/* <button className="btn_order">
                        <i className="bi bi-arrow-up"></i>
                      </button> */}
                    </div>
                  </th>
                  <th>
                    <div className="order_wrap">
                      <span>Ï†úÎ™©</span>
                      {/* <button className="btn_order">
                        <i className="bi bi-arrow-up"></i>
                      </button> */}
                    </div>
                  </th>
                  <th>
                    <div className="order_wrap">
                      <span>ÏùºÏûê</span>
                      {/* <button className="btn_order">
                        <i className="bi bi-arrow-up"></i>
                      </button> */}
                    </div>
                  </th>

                </tr>
              </thead>
              <tbody>
                {isLoading ? (
                  <tr className="tr_empty">
                    <td colSpan="10"> {/* Î°úÎî© Ïï†ÎãàÎ©îÏù¥ÏÖò Ï§ëÏïô Î∞∞Ïπò */}
                      <div className="loading">
                        <span></span> {/* Ï≤´ Î≤àÏß∏ Ïõê */}
                        <span></span> {/* Îëê Î≤àÏß∏ Ïõê */}
                        <span></span> {/* ÏÑ∏ Î≤àÏß∏ Ïõê */}
                      </div>
                    </td>
                  </tr>
                ) : (
                  sendData.length > 0 ? (
                    sendData.map((email, index) => (
                      <tr key={index} onClick={() => openModal(email)} className='send_tr'>
                        <td>
                          <input type="checkbox"
                            className='checkbox_map'
                            checked={selectedItems.includes(email.emailNmS)}
                            onChange={() => handleCheckboxChange(email.emailNmS)}
                            onClick={(e) => e.stopPropagation()} />
                        </td>
                        <td>{email.emailAddrReceiveS}</td>
                        <td>{email.emailSubjectS}</td>
                        <td>{new Date(email.emailDateS).toLocaleString()}</td>
                      </tr>
                    ))
                  ) : (
                    <tr className="tr_empty">
                      <td colSpan="10">
                        <div className="no_data">
                          <i className="bi bi-exclamation-triangle"></i> Ï°∞ÌöåÎêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.
                        </div>
                      </td>
                    </tr>
                  )
                )}
              </tbody>
            </table>
          </div>

          {/* ÌéòÏù¥ÏßÄ ÎÑ§Ïù¥ÏÖò Ïª¥Ìè¨ÎÑåÌä∏ ÏûÑÌè¨Ìä∏ */}
          {/* <Pagination /> */}

        </div>
      </main>
      {
        showModal && (
          <EmailSendModal
            selectedEmailData={selectedEmail} //ÏÑ†ÌÉùÎêú Ïù¥Î©îÏùº Îç∞Ïù¥ÌÑ∞Î•º Î™®Îã¨Ïóê Ï†ÑÎã¨
            closeModal={closeModal} // Î™®Îã¨ Îã´Í∏∞ Ìï®Ïàò Ï†ÑÎã¨
          />
        )
      }



    </Layout>

  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <BrowserRouter>
    <SentMail />
  </BrowserRouter>
);